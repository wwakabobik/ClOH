#include <stdio.h>
#include <iostream.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>
#include <fstream.h>
#include <dos.h>
#include <dir.h>

unsigned char directory[1024];
unsigned char fragment[10240];
unsigned char mask[5]="txt";
unsigned char filename[20];
unsigned char caption[10240];
unsigned char tempfile[1050];
unsigned char from0[1024];
unsigned char to0[1024];
int numchain;
int param;

inline check()
{
char ans;
for (;;)
{
getchar();
cout << "\n\nYou've enter...\nDirectory: " << directory << "\nFiletype: " << mask;
if (param==3 || param==4)
cout << "\nText to delete: " << caption;
if (param==5)
cout << "\nText to delete: " << from0 << " <---> " << to0;
cout << "\nText to insert: " << fragment << "\nThis information is correct (y/n)? ";
ans=getchar();
if (ans=='y' || ans=='Y')
break;
else if (ans=='n' || ans=='N')
{
cout << "\nData incorrect. Program terminated.";
exit(0);
}
}
return 0;
}

filework(unsigned char wfile[])
{
ifstream r;
ifstream r1;
ofstream w;
ofstream w1;
char texttemp[1024];
char tempfile[]="C:\\WINDOWS\\TEMP\\CloH.tmp";
if (param==1) 
 {
 w.open(tempfile);
 if (!w)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 r.open(wfile);
 if (!r)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 w << fragment << endl;
 r.getline(texttemp,1024);
 while (!r.eof())
  {
  w << texttemp << endl;
  r.getline(texttemp,1024);
  }
 w << texttemp << endl << "<!--Text generated by TDSV CloH-->";
 w.close();
 r.close();
 r1.open(tempfile);
 w1.open(wfile);
  if (!w1)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 if (!r1)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 r1.getline(texttemp,1024);
 while (!r1.eof())
  {
  w1 << texttemp << endl;
  r1.getline(texttemp,1024);
  }
 w1 << texttemp;
 w1.close();
 r1.close();
 }
if (param==2)
 {
 w.open(wfile,ios::app);
  if (!w)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 w << endl << fragment << endl << "<!--This text generated by TDSV CloH-->";
 }
if (param==3 || param==4)
 {
  w.open(tempfile);
 if (!w)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 r.open(wfile);
 if (!r)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 r.getline(texttemp,1024);
 while (!r.eof())
  {
  if(strcmp(texttemp,caption)==0)
  w << fragment << endl;
  else w << texttemp << endl;
  r.getline(texttemp,1024);
  }
  if(strcmp(texttemp,caption)==0)
  w << fragment << endl;
  else w << texttemp << endl;
 w << "<!--Text generated by TDSV CloH-->";
 w.close();
 r.close();
 r1.open(tempfile);
 w1.open(wfile);
  if (!w1)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 if (!r1)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 r1.getline(texttemp,1024);
 while (!r1.eof())
  {
  w1 << texttemp << endl;
  r1.getline(texttemp,1024);
  }
 w1 << texttemp;
 w1.close();
 r1.close();
 }
if (param==5)
{
  w.open(tempfile);
 if (!w)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 r.open(wfile);
 if (!r)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 r.getline(texttemp,1024);
 int status=0;
 while (!r.eof())
  {
  if(strcmp(texttemp,from0)==0)
  status=1;
  if(strcmp(texttemp,to0)==0)
  status=0;
  if (status==0)
  w << texttemp << endl;
  if (status==1)
  {
  w << fragment << endl;
  status=2;
  }
  r.getline(texttemp,1024);
  }
  if(strcmp(texttemp,from0)==0)
  status=1;
  if(strcmp(texttemp,to0)==0)
  status=0;
  if (status==0)
  w << texttemp << endl;
  if (status==1)
  {
  w << fragment << endl;
  status=2;
  }
 w << "<!--Text generated by TDSV CloH-->";
 w.close();
 r.close();
 r1.open(tempfile);
 w1.open(wfile);
  if (!w1)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 if (!r1)
  {
  cout << "Error open file. Program terminated.";
  exit(2);
  }
 r1.getline(texttemp,1024);
 while (!r1.eof())
  {
  w1 << texttemp << endl;
  r1.getline(texttemp,1024);
  }
 w1 << texttemp;
 w1.close();
 r1.close();
 }
if (param==6)
 {
 w.open(wfile,ios::trunc);
 w.close();
 w1.open(wfile);
 w1 << fragment << endl << "<!--Text generated by TDSV CloH-->";
 w1.close();
 }
if (param==7)
{
int a=0;
for (a=0; a<=numchain; a++)
{
int k=0;
int i=0;
while (directory[k]!='\0')
{
wfile[k]=directory[k];
k++;
}
cout << endl;
while (filename[i]!='\0')
{
wfile[k]=filename[i];
k++; i++;
}
if (a>9 && a< 100)
{
wfile[k]=a/10+48;
wfile[k+1]=a%10+48;
k++;
}
else if (a>99)
{
cout << "Out of range. Program terminated.";
}
else
wfile[k]=a+48;
k++;
i=0;
wfile[k]='.'; k++;
 while (mask[i]!='\0')
 {
 wfile[k]=mask[i];
 k++; i++;
 }
 wfile[k]='\0';
 cout << "\rFile " << wfile << " has been writed succesfully";
w.open(wfile);
 if (!w)
  {
  cout << "Error open file. Program terminated";
  exit(2);
  }
 w << fragment << endl << "<!--Text generated by TDSV CloH-->";
 w.close();
 }
 cout << "\r                                                            ";
}
return 0;
}

getfile()
{
check();
int k=0;
struct ffblk fb;
char wildCard[1050]="*.*";
while (directory[k]!='\0')
{
wildCard[k]=directory[k];
k++;
}
wildCard[k]='*';
k++;
wildCard[k]='.';
k++;
int i=0;
while (mask[i]!='\0')
{
wildCard[k]=mask[i];
i++;
k++;
}
if (param!=7)
{
int done;
done = findfirst(wildCard, &fb, FA_DIREC);
while (!done)
{
int k=0;
int i=0;
unsigned char tfile[100];
strcpy(tfile,fb.ff_name);
while (directory[k]!='\0')
{
tempfile[k]=directory[k];
k++;
}
while (tfile[i]!='\0')
{
tempfile[k+i]=tfile[i];
i++;
}
tempfile[k+i]='\0';
cout << "\nWorking on " << tempfile; //fb.ff_name;
filework(tempfile);
done=findnext(&fb);
}
}
else
filework(wildCard);
cout << "\nNow OK\nPress enter to exit";
getch();
return 0;
}

cfragment()
{
getchar();
cout << "\n\nEnter some fragment which you want to insert and then ENTER:\n";
gets(fragment);
return 0;
}

cffragment()
{
getchar();
unsigned char file[1024];
char letter[10240];
int num0=0;
ifstream r;
cout << "\n\nEnter filename to read: ";
gets(file);
r.open(file);
if (!r)
{
cout << "Error read file. Program terminated";
exit(2);
}
r.getline(letter,10240);
while (!r.eof())
{
if (num0>102399)
 {
 cout << "Run out of range. Program terminated";
 exit(3);
 }
int k=0;
if (num0!=0)
 {
 num0++;
 }
while (letter[k]!='\0')
 {
 fragment[num0+k]=letter[k];
 k++;
 }
num0+=k;
fragment[num0]='\n';
r.getline(letter,10240);
if (r.eof())
break;
}
int k=0;
num0++;
while (letter[k]!='\0')
{
fragment[num0+k]=letter[k];
k++;
}
if (k!=0)
num0+=k-1;
fragment[num0+1]='\0';
cout << "\nNow OK\n";
//cout << fragment;
getch();
return 0;
}

cfcaption()
{
getchar();
unsigned char file[1024];
char letter[10240];
int num0=0;
ifstream r;
cout << "\n\nEnter filename to read: ";
gets(file);
r.open(file);
if (!r)
{
cout << "Error read file. Program terminated";
exit(2);
}
r.getline(letter,10240);
while (!r.eof())
{
if (num0>102399)
 {
 cout << "Run out of range. Program terminated";
 exit(3);
 }
int k=0;
if (num0!=0)
 {
 num0++;
 }
while (letter[k]!='\0')
 {
 caption[num0+k]=letter[k];
 k++;
 }
num0+=k;
caption[num0]='\n';
r.getline(letter,10240);
if (r.eof())
break;
}
int k=0;
num0++;
while (letter[k]!='\0')
{
caption[num0+k]=letter[k];
k++;
}
if (k!=0)
num0+=k-1;
caption[num0+1]='\0';
cout << "\nNow OK\n";
//cout << caption;
getch();
return 0;
}

ccaption()
{
getchar();
cout << "\n\nEnter some fragment which you want to replace and then ENTER:\n";
gets(caption);
return 0;
}

cdirectory()
{
getchar();
cout << "\n\nEnter the full destination, or if program in parent folder - short adress.\nFor example C:\\MyDoc\\MYTEXT\\ or MYTEXT\\ if CloHe in MyDoc directory:\n";
gets(directory);
return 0;
}

cfiletype()
{
getchar();
cout << "\n\nEnter filetype (for example: txt or html):\n";
gets(mask);
return 0;
}

capmenu()
{
char enter;
getchar();
cout << "\n\nEnter your choise:\n1. Change text\n2. Change text (use file)";
for(;;)
{
enter=getchar();
if (enter=='1' || enter=='2')
break;
}
switch(enter)
{
case '1':
cfragment();
break;
case '2':
cffragment();
break;
}
return 0;
}

frto()
{
getchar();
cout << "\nEnter some kind of fragment from (replace)...";
gets(from0);
cout << "\nEnter some kind of fragment to (keep)...";
gets(to0);
return 0;
}

chain()
{
getchar();
cout << "\nEnter variable filename: ";
gets(filename);
cout << "\nEnter number of clone files: ";
cin >> numchain;
return 0;
}

tofile()
{
char enter;
getchar();
cout << "\n\nEnter your choise:\n1. Insert in the beginning\n2. Insert in the end\n3. Insert into place\n4. Insert into place (use file)\n5. Insert into place from/to\n6. Replace files\n7. Create chain of files\n";
for(;;)
{
enter=getchar();
if (enter=='1' || enter=='2' || enter=='3' || enter=='4' || enter=='5' || enter=='6' || enter=='7')
break;
}
switch(enter)
{
case '1':
param=1;
break;
case '2':
param=2;
break;
case '3':
param=3;
ccaption();
break;
case '4':
param=4;
cfcaption();
break;
case '5':
param=5;
frto();
break;
case '6':
param=6;
break;
case '7':
param=7;
chain();
break;
default:
cout << "\nPlease, try again";
break;
}
return 0;
}

main()
{
param=0;
char enter;
for (;;)
{
cout << "\n\t\t\tTDSV CloH\n\nGreetings! What do you want to do?\n1. Change filetype\n2. Change directory\n3. Change method \n4. Change text to insert\n5. Add/Change files\n";
enter=getchar();
switch(enter)
{
case '1':
cfiletype();
break;
case '2':
cdirectory();
break;
case '3':
tofile();
break;
case '4':
capmenu();
break;
case '5':
getfile();
break;
case '~':
cout << "\n\nTDSV CloH\tCopyright 2004 (C) by Vereshchagin Iliya\n\nHave a nice day!";
exit(0);
break;
default:
cout << "\nPlease, try again. To exit ~\n";
break;
}
getchar();
}
return 0;
}
